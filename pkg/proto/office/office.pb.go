// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.0
// source: office/office.proto

package office

import (
	context "context"
	common "github.com/OpenIMSDK/chat/pkg/proto/common"
	sdkws "github.com/OpenIMSDK/protocol/sdkws"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TagUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
}

func (x *TagUser) Reset() {
	*x = TagUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagUser) ProtoMessage() {}

func (x *TagUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagUser.ProtoReflect.Descriptor instead.
func (*TagUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{0}
}

func (x *TagUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TagUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID      string                   `protobuf:"bytes,1,opt,name=tagID,proto3" json:"tagID"`
	TagName    string                   `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	Users      []*common.UserPublicInfo `protobuf:"bytes,3,rep,name=users,proto3" json:"users"`
	GroupIDs   []string                 `protobuf:"bytes,4,rep,name=groupIDs,proto3" json:"groupIDs"`
	CreateTime int64                    `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *Tag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tag) GetUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Tag) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *Tag) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetUserTagsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetUserTagsReq) Reset() {
	*x = GetUserTagsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagsReq) ProtoMessage() {}

func (x *GetUserTagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagsReq.ProtoReflect.Descriptor instead.
func (*GetUserTagsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserTagsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserTagsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags"`
}

func (x *GetUserTagsResp) Reset() {
	*x = GetUserTagsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTagsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagsResp) ProtoMessage() {}

func (x *GetUserTagsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagsResp.ProtoReflect.Descriptor instead.
func (*GetUserTagsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserTagsResp) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName  string   `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	UserID   string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	UserIDs  []string `protobuf:"bytes,3,rep,name=userIDs,proto3" json:"userIDs"`
	GroupIDs []string `protobuf:"bytes,4,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *CreateTagReq) Reset() {
	*x = CreateTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagReq) ProtoMessage() {}

func (x *CreateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagReq.ProtoReflect.Descriptor instead.
func (*CreateTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CreateTagReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateTagReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *CreateTagReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type CreateTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTagResp) Reset() {
	*x = CreateTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResp) ProtoMessage() {}

func (x *CreateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResp.ProtoReflect.Descriptor instead.
func (*CreateTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{5}
}

type DeleteTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID string `protobuf:"bytes,2,opt,name=tagID,proto3" json:"tagID"`
}

func (x *DeleteTagReq) Reset() {
	*x = DeleteTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagReq) ProtoMessage() {}

func (x *DeleteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagReq.ProtoReflect.Descriptor instead.
func (*DeleteTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTagReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

type DeleteTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResp) Reset() {
	*x = DeleteTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResp) ProtoMessage() {}

func (x *DeleteTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResp.ProtoReflect.Descriptor instead.
func (*DeleteTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{7}
}

type SetTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID       string   `protobuf:"bytes,2,opt,name=tagID,proto3" json:"tagID"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	AddUserIDs  []string `protobuf:"bytes,4,rep,name=addUserIDs,proto3" json:"addUserIDs"`
	DelUserIDs  []string `protobuf:"bytes,5,rep,name=delUserIDs,proto3" json:"delUserIDs"`
	AddGroupIDs []string `protobuf:"bytes,6,rep,name=addGroupIDs,proto3" json:"addGroupIDs"`
	DelGroupIDs []string `protobuf:"bytes,7,rep,name=delGroupIDs,proto3" json:"delGroupIDs"`
}

func (x *SetTagReq) Reset() {
	*x = SetTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagReq) ProtoMessage() {}

func (x *SetTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagReq.ProtoReflect.Descriptor instead.
func (*SetTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{8}
}

func (x *SetTagReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *SetTagReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetTagReq) GetAddUserIDs() []string {
	if x != nil {
		return x.AddUserIDs
	}
	return nil
}

func (x *SetTagReq) GetDelUserIDs() []string {
	if x != nil {
		return x.DelUserIDs
	}
	return nil
}

func (x *SetTagReq) GetAddGroupIDs() []string {
	if x != nil {
		return x.AddGroupIDs
	}
	return nil
}

func (x *SetTagReq) GetDelGroupIDs() []string {
	if x != nil {
		return x.DelGroupIDs
	}
	return nil
}

type SetTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTagResp) Reset() {
	*x = SetTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagResp) ProtoMessage() {}

func (x *SetTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagResp.ProtoReflect.Descriptor instead.
func (*SetTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{9}
}

type SendMsg2TagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagIDs           []string `protobuf:"bytes,1,rep,name=tagIDs,proto3" json:"tagIDs"`
	UserIDs          []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"`
	GroupIDs         []string `protobuf:"bytes,3,rep,name=groupIDs,proto3" json:"groupIDs"`
	SendID           string   `protobuf:"bytes,4,opt,name=sendID,proto3" json:"sendID"`
	SenderPlatformID int32    `protobuf:"varint,5,opt,name=senderPlatformID,proto3" json:"senderPlatformID"`
	Content          string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content"`
}

func (x *SendMsg2TagReq) Reset() {
	*x = SendMsg2TagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsg2TagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsg2TagReq) ProtoMessage() {}

func (x *SendMsg2TagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsg2TagReq.ProtoReflect.Descriptor instead.
func (*SendMsg2TagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{10}
}

func (x *SendMsg2TagReq) GetTagIDs() []string {
	if x != nil {
		return x.TagIDs
	}
	return nil
}

func (x *SendMsg2TagReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SendMsg2TagReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *SendMsg2TagReq) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *SendMsg2TagReq) GetSenderPlatformID() int32 {
	if x != nil {
		return x.SenderPlatformID
	}
	return 0
}

func (x *SendMsg2TagReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SendMsg2TagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendUser     *common.UserPublicInfo `protobuf:"bytes,1,opt,name=sendUser,proto3" json:"sendUser"`
	RecvUserIDs  []string               `protobuf:"bytes,2,rep,name=recvUserIDs,proto3" json:"recvUserIDs"`
	RecvGroupIDs []string               `protobuf:"bytes,3,rep,name=recvGroupIDs,proto3" json:"recvGroupIDs"`
	Content      string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
}

func (x *SendMsg2TagResp) Reset() {
	*x = SendMsg2TagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsg2TagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsg2TagResp) ProtoMessage() {}

func (x *SendMsg2TagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsg2TagResp.ProtoReflect.Descriptor instead.
func (*SendMsg2TagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{11}
}

func (x *SendMsg2TagResp) GetSendUser() *common.UserPublicInfo {
	if x != nil {
		return x.SendUser
	}
	return nil
}

func (x *SendMsg2TagResp) GetRecvUserIDs() []string {
	if x != nil {
		return x.RecvUserIDs
	}
	return nil
}

func (x *SendMsg2TagResp) GetRecvGroupIDs() []string {
	if x != nil {
		return x.RecvGroupIDs
	}
	return nil
}

func (x *SendMsg2TagResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetTagSendLogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	UserID     string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *GetTagSendLogsReq) Reset() {
	*x = GetTagSendLogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagSendLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSendLogsReq) ProtoMessage() {}

func (x *GetTagSendLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSendLogsReq.ProtoReflect.Descriptor instead.
func (*GetTagSendLogsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{12}
}

func (x *GetTagSendLogsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTagSendLogsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type TagSendLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Tags     []*Tag                   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags"`
	Users    []*common.UserPublicInfo `protobuf:"bytes,3,rep,name=users,proto3" json:"users"`
	GroupIDs []string                 `protobuf:"bytes,4,rep,name=groupIDs,proto3" json:"groupIDs"`
	Content  string                   `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	SendTime int64                    `protobuf:"varint,6,opt,name=sendTime,proto3" json:"sendTime"`
}

func (x *TagSendLog) Reset() {
	*x = TagSendLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSendLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSendLog) ProtoMessage() {}

func (x *TagSendLog) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSendLog.ProtoReflect.Descriptor instead.
func (*TagSendLog) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{13}
}

func (x *TagSendLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagSendLog) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TagSendLog) GetUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TagSendLog) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *TagSendLog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TagSendLog) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type GetTagSendLogsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagSendLogs []*TagSendLog `protobuf:"bytes,1,rep,name=tagSendLogs,proto3" json:"tagSendLogs"`
}

func (x *GetTagSendLogsResp) Reset() {
	*x = GetTagSendLogsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagSendLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSendLogsResp) ProtoMessage() {}

func (x *GetTagSendLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSendLogsResp.ProtoReflect.Descriptor instead.
func (*GetTagSendLogsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{14}
}

func (x *GetTagSendLogsResp) GetTagSendLogs() []*TagSendLog {
	if x != nil {
		return x.TagSendLogs
	}
	return nil
}

type DelTagSendLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids"`
}

func (x *DelTagSendLogReq) Reset() {
	*x = DelTagSendLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTagSendLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTagSendLogReq) ProtoMessage() {}

func (x *DelTagSendLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTagSendLogReq.ProtoReflect.Descriptor instead.
func (*DelTagSendLogReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{15}
}

func (x *DelTagSendLogReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DelTagSendLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelTagSendLogResp) Reset() {
	*x = DelTagSendLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTagSendLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTagSendLogResp) ProtoMessage() {}

func (x *DelTagSendLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTagSendLogResp.ProtoReflect.Descriptor instead.
func (*DelTagSendLogResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{16}
}

type GetUserTagByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID string `protobuf:"bytes,1,opt,name=tagID,proto3" json:"tagID"`
}

func (x *GetUserTagByIDReq) Reset() {
	*x = GetUserTagByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTagByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagByIDReq) ProtoMessage() {}

func (x *GetUserTagByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagByIDReq.ProtoReflect.Descriptor instead.
func (*GetUserTagByIDReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserTagByIDReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

type GetUserTagByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *Tag `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag"`
}

func (x *GetUserTagByIDResp) Reset() {
	*x = GetUserTagByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTagByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagByIDResp) ProtoMessage() {}

func (x *GetUserTagByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagByIDResp.ProtoReflect.Descriptor instead.
func (*GetUserTagByIDResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserTagByIDResp) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID     string `protobuf:"bytes,1,opt,name=commentID,proto3" json:"commentID"`
	UserID        string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Nickname      string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL       string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	ReplyUserID   string `protobuf:"bytes,5,opt,name=replyUserID,proto3" json:"replyUserID"`
	ReplyNickname string `protobuf:"bytes,6,opt,name=replyNickname,proto3" json:"replyNickname"`
	ReplyFaceURL  string `protobuf:"bytes,7,opt,name=replyFaceURL,proto3" json:"replyFaceURL"`
	Content       string `protobuf:"bytes,8,opt,name=content,proto3" json:"content"`
	CreateTime    int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{19}
}

func (x *Comment) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *Comment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Comment) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Comment) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *Comment) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *Comment) GetReplyNickname() string {
	if x != nil {
		return x.ReplyNickname
	}
	return ""
}

func (x *Comment) GetReplyFaceURL() string {
	if x != nil {
		return x.ReplyFaceURL
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type PermissionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName"`
	GroupID   string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID"`
}

func (x *PermissionGroup) Reset() {
	*x = PermissionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionGroup) ProtoMessage() {}

func (x *PermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionGroup.ProtoReflect.Descriptor instead.
func (*PermissionGroup) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{20}
}

func (x *PermissionGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PermissionGroup) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type WorkMomentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
}

func (x *WorkMomentUser) Reset() {
	*x = WorkMomentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMomentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentUser) ProtoMessage() {}

func (x *WorkMomentUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentUser.ProtoReflect.Descriptor instead.
func (*WorkMomentUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{21}
}

func (x *WorkMomentUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMomentUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original"`
	Thumb    string `protobuf:"bytes,2,opt,name=thumb,proto3" json:"thumb"`
	Width    int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width"`
	Height   int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{22}
}

func (x *Meta) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *Meta) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Meta) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Meta) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type WorkMomentContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metas []*Meta `protobuf:"bytes,1,rep,name=metas,proto3" json:"metas"`
	Text  string  `protobuf:"bytes,2,opt,name=text,proto3" json:"text"`
	Type  int32   `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
}

func (x *WorkMomentContent) Reset() {
	*x = WorkMomentContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMomentContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentContent) ProtoMessage() {}

func (x *WorkMomentContent) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentContent.ProtoReflect.Descriptor instead.
func (*WorkMomentContent) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{23}
}

func (x *WorkMomentContent) GetMetas() []*Meta {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *WorkMomentContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *WorkMomentContent) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type LikeUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
	FaceURL  string `protobuf:"bytes,5,opt,name=faceURL,proto3" json:"faceURL"`
	Gender   int32  `protobuf:"varint,6,opt,name=gender,proto3" json:"gender"`
	Level    int32  `protobuf:"varint,7,opt,name=level,proto3" json:"level"`
	LikeTime int64  `protobuf:"varint,8,opt,name=likeTime,proto3" json:"likeTime"`
}

func (x *LikeUserInfo) Reset() {
	*x = LikeUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeUserInfo) ProtoMessage() {}

func (x *LikeUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeUserInfo.ProtoReflect.Descriptor instead.
func (*LikeUserInfo) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{24}
}

func (x *LikeUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LikeUserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LikeUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LikeUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LikeUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *LikeUserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *LikeUserInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LikeUserInfo) GetLikeTime() int64 {
	if x != nil {
		return x.LikeTime
	}
	return 0
}

type WorkMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID    string                   `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID          string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Nickname        string                   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL         string                   `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Content         *WorkMomentContent       `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	LikeUsers       []*LikeUserInfo          `protobuf:"bytes,6,rep,name=likeUsers,proto3" json:"likeUsers"`
	Comments        []*Comment               `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments"`
	Permission      int32                    `protobuf:"varint,8,opt,name=permission,proto3" json:"permission"`
	PermissionUsers []*common.UserPublicInfo `protobuf:"bytes,9,rep,name=permissionUsers,proto3" json:"permissionUsers"`
	AtUsers         []*common.UserPublicInfo `protobuf:"bytes,10,rep,name=atUsers,proto3" json:"atUsers"`
	CreateTime      int64                    `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
}

func (x *WorkMoment) Reset() {
	*x = WorkMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMoment) ProtoMessage() {}

func (x *WorkMoment) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMoment.ProtoReflect.Descriptor instead.
func (*WorkMoment) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{25}
}

func (x *WorkMoment) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *WorkMoment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMoment) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *WorkMoment) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *WorkMoment) GetContent() *WorkMomentContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WorkMoment) GetLikeUsers() []*LikeUserInfo {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *WorkMoment) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *WorkMoment) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *WorkMoment) GetPermissionUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.PermissionUsers
	}
	return nil
}

func (x *WorkMoment) GetAtUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.AtUsers
	}
	return nil
}

func (x *WorkMoment) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateOneWorkMomentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID       string             `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID             string             `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Content            *WorkMomentContent `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	LikeUserIDs        []string           `protobuf:"bytes,4,rep,name=likeUserIDs,proto3" json:"likeUserIDs"`
	Comments           []*Comment         `protobuf:"bytes,5,rep,name=comments,proto3" json:"comments"`
	Permission         int32              `protobuf:"varint,6,opt,name=permission,proto3" json:"permission"`
	PermissionUserIDs  []string           `protobuf:"bytes,7,rep,name=permissionUserIDs,proto3" json:"permissionUserIDs"`
	PermissionGroupIDs []string           `protobuf:"bytes,8,rep,name=permissionGroupIDs,proto3" json:"permissionGroupIDs"`
	AtUserIDs          []string           `protobuf:"bytes,9,rep,name=atUserIDs,proto3" json:"atUserIDs"`
	CreateTime         int64              `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime"`
}

func (x *CreateOneWorkMomentReq) Reset() {
	*x = CreateOneWorkMomentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneWorkMomentReq) ProtoMessage() {}

func (x *CreateOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*CreateOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{26}
}

func (x *CreateOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *CreateOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateOneWorkMomentReq) GetContent() *WorkMomentContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetLikeUserIDs() []string {
	if x != nil {
		return x.LikeUserIDs
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *CreateOneWorkMomentReq) GetPermissionUserIDs() []string {
	if x != nil {
		return x.PermissionUserIDs
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetPermissionGroupIDs() []string {
	if x != nil {
		return x.PermissionGroupIDs
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetAtUserIDs() []string {
	if x != nil {
		return x.AtUserIDs
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateOneWorkMomentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoment *WorkMoment `protobuf:"bytes,1,opt,name=workMoment,proto3" json:"workMoment"`
}

func (x *CreateOneWorkMomentResp) Reset() {
	*x = CreateOneWorkMomentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneWorkMomentResp) ProtoMessage() {}

func (x *CreateOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*CreateOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{27}
}

func (x *CreateOneWorkMomentResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type DeleteOneWorkMomentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID string `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID       string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *DeleteOneWorkMomentReq) Reset() {
	*x = DeleteOneWorkMomentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneWorkMomentReq) ProtoMessage() {}

func (x *DeleteOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*DeleteOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *DeleteOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteOneWorkMomentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *DeleteOneWorkMomentResp) Reset() {
	*x = DeleteOneWorkMomentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneWorkMomentResp) ProtoMessage() {}

func (x *DeleteOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*DeleteOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteOneWorkMomentResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type LikeOneWorkMomentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	WorkMomentID string `protobuf:"bytes,2,opt,name=WorkMomentID,proto3" json:"WorkMomentID"`
	Like         bool   `protobuf:"varint,3,opt,name=like,proto3" json:"like"`
}

func (x *LikeOneWorkMomentReq) Reset() {
	*x = LikeOneWorkMomentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeOneWorkMomentReq) ProtoMessage() {}

func (x *LikeOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*LikeOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{30}
}

func (x *LikeOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LikeOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *LikeOneWorkMomentReq) GetLike() bool {
	if x != nil {
		return x.Like
	}
	return false
}

type LikeOneWorkMomentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoment *WorkMoment `protobuf:"bytes,1,opt,name=workMoment,proto3" json:"workMoment"`
}

func (x *LikeOneWorkMomentResp) Reset() {
	*x = LikeOneWorkMomentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeOneWorkMomentResp) ProtoMessage() {}

func (x *LikeOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*LikeOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{31}
}

func (x *LikeOneWorkMomentResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type CommentOneWorkMomentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	WorkMomentID string `protobuf:"bytes,2,opt,name=workMomentID,proto3" json:"workMomentID"`
	ReplyUserID  string `protobuf:"bytes,3,opt,name=replyUserID,proto3" json:"replyUserID"`
	Content      string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
}

func (x *CommentOneWorkMomentReq) Reset() {
	*x = CommentOneWorkMomentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentOneWorkMomentReq) ProtoMessage() {}

func (x *CommentOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*CommentOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{32}
}

func (x *CommentOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommentOneWorkMomentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID  string      `protobuf:"bytes,1,opt,name=commentID,proto3" json:"commentID"`
	WorkMoment *WorkMoment `protobuf:"bytes,2,opt,name=workMoment,proto3" json:"workMoment"`
}

func (x *CommentOneWorkMomentResp) Reset() {
	*x = CommentOneWorkMomentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentOneWorkMomentResp) ProtoMessage() {}

func (x *CommentOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*CommentOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{33}
}

func (x *CommentOneWorkMomentResp) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *CommentOneWorkMomentResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type DeleteCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID string `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	CommentID    string `protobuf:"bytes,2,opt,name=commentID,proto3" json:"commentID"`
}

func (x *DeleteCommentReq) Reset() {
	*x = DeleteCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReq) ProtoMessage() {}

func (x *DeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteCommentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *DeleteCommentReq) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

type DeleteCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs    []string    `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	WorkMoment *WorkMoment `protobuf:"bytes,2,opt,name=workMoment,proto3" json:"workMoment"`
}

func (x *DeleteCommentResp) Reset() {
	*x = DeleteCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResp) ProtoMessage() {}

func (x *DeleteCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteCommentResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *DeleteCommentResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type GetWorkMomentByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID string `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
}

func (x *GetWorkMomentByIDReq) Reset() {
	*x = GetWorkMomentByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkMomentByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkMomentByIDReq) ProtoMessage() {}

func (x *GetWorkMomentByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkMomentByIDReq.ProtoReflect.Descriptor instead.
func (*GetWorkMomentByIDReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{36}
}

func (x *GetWorkMomentByIDReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

type GetWorkMomentByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoment *WorkMoment `protobuf:"bytes,2,opt,name=workMoment,proto3" json:"workMoment"`
}

func (x *GetWorkMomentByIDResp) Reset() {
	*x = GetWorkMomentByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkMomentByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkMomentByIDResp) ProtoMessage() {}

func (x *GetWorkMomentByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkMomentByIDResp.ProtoReflect.Descriptor instead.
func (*GetWorkMomentByIDResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{37}
}

func (x *GetWorkMomentByIDResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type GetUserSendWorkMomentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *GetUserSendWorkMomentsReq) Reset() {
	*x = GetUserSendWorkMomentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSendWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSendWorkMomentsReq) ProtoMessage() {}

func (x *GetUserSendWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSendWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*GetUserSendWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserSendWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserSendWorkMomentsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetUserSendWorkMomentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoments []*WorkMoment `protobuf:"bytes,1,rep,name=workMoments,proto3" json:"workMoments"`
}

func (x *GetUserSendWorkMomentsResp) Reset() {
	*x = GetUserSendWorkMomentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSendWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSendWorkMomentsResp) ProtoMessage() {}

func (x *GetUserSendWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSendWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*GetUserSendWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserSendWorkMomentsResp) GetWorkMoments() []*WorkMoment {
	if x != nil {
		return x.WorkMoments
	}
	return nil
}

type GetUserRecvWorkMomentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	FriendIDs  []string                 `protobuf:"bytes,2,rep,name=friendIDs,proto3" json:"friendIDs"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination"`
}

func (x *GetUserRecvWorkMomentsReq) Reset() {
	*x = GetUserRecvWorkMomentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRecvWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRecvWorkMomentsReq) ProtoMessage() {}

func (x *GetUserRecvWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRecvWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*GetUserRecvWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserRecvWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserRecvWorkMomentsReq) GetFriendIDs() []string {
	if x != nil {
		return x.FriendIDs
	}
	return nil
}

func (x *GetUserRecvWorkMomentsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetUserRecvWorkMomentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoments []*WorkMoment `protobuf:"bytes,1,rep,name=workMoments,proto3" json:"workMoments"`
}

func (x *GetUserRecvWorkMomentsResp) Reset() {
	*x = GetUserRecvWorkMomentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRecvWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRecvWorkMomentsResp) ProtoMessage() {}

func (x *GetUserRecvWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRecvWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*GetUserRecvWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{41}
}

func (x *GetUserRecvWorkMomentsResp) GetWorkMoments() []*WorkMoment {
	if x != nil {
		return x.WorkMoments
	}
	return nil
}

type FindRelevantWorkMomentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *FindRelevantWorkMomentsReq) Reset() {
	*x = FindRelevantWorkMomentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRelevantWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRelevantWorkMomentsReq) ProtoMessage() {}

func (x *FindRelevantWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRelevantWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*FindRelevantWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{42}
}

func (x *FindRelevantWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FindRelevantWorkMomentsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type WorkMomentLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMomentID    string                   `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID          string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Nickname        string                   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL         string                   `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Content         *WorkMomentContent       `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	LikeUsers       []*LikeUserInfo          `protobuf:"bytes,6,rep,name=likeUsers,proto3" json:"likeUsers"`
	Comments        []*Comment               `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments"`
	Permission      int32                    `protobuf:"varint,8,opt,name=permission,proto3" json:"permission"`
	PermissionUsers []*common.UserPublicInfo `protobuf:"bytes,9,rep,name=permissionUsers,proto3" json:"permissionUsers"`
	AtUsers         []*common.UserPublicInfo `protobuf:"bytes,10,rep,name=atUsers,proto3" json:"atUsers"`
	CreateTime      int64                    `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	Type            int32                    `protobuf:"varint,12,opt,name=type,proto3" json:"type"`
}

func (x *WorkMomentLog) Reset() {
	*x = WorkMomentLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMomentLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentLog) ProtoMessage() {}

func (x *WorkMomentLog) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentLog.ProtoReflect.Descriptor instead.
func (*WorkMomentLog) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{43}
}

func (x *WorkMomentLog) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *WorkMomentLog) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMomentLog) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *WorkMomentLog) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *WorkMomentLog) GetContent() *WorkMomentContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WorkMomentLog) GetLikeUsers() []*LikeUserInfo {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *WorkMomentLog) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *WorkMomentLog) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *WorkMomentLog) GetPermissionUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.PermissionUsers
	}
	return nil
}

func (x *WorkMomentLog) GetAtUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.AtUsers
	}
	return nil
}

func (x *WorkMomentLog) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *WorkMomentLog) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type FindRelevantWorkMomentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMoments []*WorkMomentLog `protobuf:"bytes,1,rep,name=workMoments,proto3" json:"workMoments"`
}

func (x *FindRelevantWorkMomentsResp) Reset() {
	*x = FindRelevantWorkMomentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRelevantWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRelevantWorkMomentsResp) ProtoMessage() {}

func (x *FindRelevantWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRelevantWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*FindRelevantWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{44}
}

func (x *FindRelevantWorkMomentsResp) GetWorkMoments() []*WorkMomentLog {
	if x != nil {
		return x.WorkMoments
	}
	return nil
}

type GetUnreadWorkMomentsCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetUnreadWorkMomentsCountReq) Reset() {
	*x = GetUnreadWorkMomentsCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnreadWorkMomentsCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadWorkMomentsCountReq) ProtoMessage() {}

func (x *GetUnreadWorkMomentsCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadWorkMomentsCountReq.ProtoReflect.Descriptor instead.
func (*GetUnreadWorkMomentsCountReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{45}
}

func (x *GetUnreadWorkMomentsCountReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUnreadWorkMomentsCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
}

func (x *GetUnreadWorkMomentsCountResp) Reset() {
	*x = GetUnreadWorkMomentsCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnreadWorkMomentsCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadWorkMomentsCountResp) ProtoMessage() {}

func (x *GetUnreadWorkMomentsCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadWorkMomentsCountResp.ProtoReflect.Descriptor instead.
func (*GetUnreadWorkMomentsCountResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{46}
}

func (x *GetUnreadWorkMomentsCountResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ReadWorkMomentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
}

func (x *ReadWorkMomentsReq) Reset() {
	*x = ReadWorkMomentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWorkMomentsReq) ProtoMessage() {}

func (x *ReadWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*ReadWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{47}
}

func (x *ReadWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReadWorkMomentsReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ReadWorkMomentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadWorkMomentsResp) Reset() {
	*x = ReadWorkMomentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWorkMomentsResp) ProtoMessage() {}

func (x *ReadWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*ReadWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{48}
}

type WorkMomentNotificationMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationMsgType int32              `protobuf:"varint,1,opt,name=notificationMsgType,proto3" json:"notificationMsgType"`
	WorkMomentID        string             `protobuf:"bytes,2,opt,name=workMomentID,proto3" json:"workMomentID"`
	Content             *WorkMomentContent `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	UserID              string             `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
	Nickname            string             `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname"`
	FaceURL             string             `protobuf:"bytes,6,opt,name=faceURL,proto3" json:"faceURL"`
	CreateTime          int64              `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime"`
}

func (x *WorkMomentNotificationMsg) Reset() {
	*x = WorkMomentNotificationMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office_office_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMomentNotificationMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentNotificationMsg) ProtoMessage() {}

func (x *WorkMomentNotificationMsg) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentNotificationMsg.ProtoReflect.Descriptor instead.
func (*WorkMomentNotificationMsg) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{49}
}

func (x *WorkMomentNotificationMsg) GetNotificationMsgType() int32 {
	if x != nil {
		return x.NotificationMsgType
	}
	return 0
}

func (x *WorkMomentNotificationMsg) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetContent() *WorkMomentContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WorkMomentNotificationMsg) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_office_office_proto protoreflect.FileDescriptor

var file_office_office_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x70, 0x75, 0x62, 0x2f, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x07, 0x54, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68,
	0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x24, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x44, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22,
	0x0c, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbc, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x37,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73,
	0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x9b, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x46,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22,
	0x44, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6a, 0x0a,
	0x11, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xff, 0x03, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x58, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0x56,
	0x0a, 0x15, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x7b, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x04,
	0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x35, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x9f, 0x02, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xf8, 0x0e, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x54,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x1f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x1f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1c,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0b, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x12, 0x21, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x12, 0x23, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x4f,
	0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68,
	0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x6f, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x27, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68,
	0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x78, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7e, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x0f,
	0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x44, 0x4b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_office_office_proto_rawDescOnce sync.Once
	file_office_office_proto_rawDescData = file_office_office_proto_rawDesc
)

func file_office_office_proto_rawDescGZIP() []byte {
	file_office_office_proto_rawDescOnce.Do(func() {
		file_office_office_proto_rawDescData = protoimpl.X.CompressGZIP(file_office_office_proto_rawDescData)
	})
	return file_office_office_proto_rawDescData
}

var file_office_office_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_office_office_proto_goTypes = []interface{}{
	(*TagUser)(nil),                       // 0: OpenIMChat.office.TagUser
	(*Tag)(nil),                           // 1: OpenIMChat.office.Tag
	(*GetUserTagsReq)(nil),                // 2: OpenIMChat.office.GetUserTagsReq
	(*GetUserTagsResp)(nil),               // 3: OpenIMChat.office.GetUserTagsResp
	(*CreateTagReq)(nil),                  // 4: OpenIMChat.office.CreateTagReq
	(*CreateTagResp)(nil),                 // 5: OpenIMChat.office.CreateTagResp
	(*DeleteTagReq)(nil),                  // 6: OpenIMChat.office.DeleteTagReq
	(*DeleteTagResp)(nil),                 // 7: OpenIMChat.office.DeleteTagResp
	(*SetTagReq)(nil),                     // 8: OpenIMChat.office.SetTagReq
	(*SetTagResp)(nil),                    // 9: OpenIMChat.office.SetTagResp
	(*SendMsg2TagReq)(nil),                // 10: OpenIMChat.office.SendMsg2TagReq
	(*SendMsg2TagResp)(nil),               // 11: OpenIMChat.office.SendMsg2TagResp
	(*GetTagSendLogsReq)(nil),             // 12: OpenIMChat.office.GetTagSendLogsReq
	(*TagSendLog)(nil),                    // 13: OpenIMChat.office.TagSendLog
	(*GetTagSendLogsResp)(nil),            // 14: OpenIMChat.office.GetTagSendLogsResp
	(*DelTagSendLogReq)(nil),              // 15: OpenIMChat.office.DelTagSendLogReq
	(*DelTagSendLogResp)(nil),             // 16: OpenIMChat.office.DelTagSendLogResp
	(*GetUserTagByIDReq)(nil),             // 17: OpenIMChat.office.GetUserTagByIDReq
	(*GetUserTagByIDResp)(nil),            // 18: OpenIMChat.office.GetUserTagByIDResp
	(*Comment)(nil),                       // 19: OpenIMChat.office.Comment
	(*PermissionGroup)(nil),               // 20: OpenIMChat.office.PermissionGroup
	(*WorkMomentUser)(nil),                // 21: OpenIMChat.office.WorkMomentUser
	(*Meta)(nil),                          // 22: OpenIMChat.office.Meta
	(*WorkMomentContent)(nil),             // 23: OpenIMChat.office.WorkMomentContent
	(*LikeUserInfo)(nil),                  // 24: OpenIMChat.office.LikeUserInfo
	(*WorkMoment)(nil),                    // 25: OpenIMChat.office.WorkMoment
	(*CreateOneWorkMomentReq)(nil),        // 26: OpenIMChat.office.CreateOneWorkMomentReq
	(*CreateOneWorkMomentResp)(nil),       // 27: OpenIMChat.office.CreateOneWorkMomentResp
	(*DeleteOneWorkMomentReq)(nil),        // 28: OpenIMChat.office.DeleteOneWorkMomentReq
	(*DeleteOneWorkMomentResp)(nil),       // 29: OpenIMChat.office.DeleteOneWorkMomentResp
	(*LikeOneWorkMomentReq)(nil),          // 30: OpenIMChat.office.LikeOneWorkMomentReq
	(*LikeOneWorkMomentResp)(nil),         // 31: OpenIMChat.office.LikeOneWorkMomentResp
	(*CommentOneWorkMomentReq)(nil),       // 32: OpenIMChat.office.CommentOneWorkMomentReq
	(*CommentOneWorkMomentResp)(nil),      // 33: OpenIMChat.office.CommentOneWorkMomentResp
	(*DeleteCommentReq)(nil),              // 34: OpenIMChat.office.DeleteCommentReq
	(*DeleteCommentResp)(nil),             // 35: OpenIMChat.office.DeleteCommentResp
	(*GetWorkMomentByIDReq)(nil),          // 36: OpenIMChat.office.GetWorkMomentByIDReq
	(*GetWorkMomentByIDResp)(nil),         // 37: OpenIMChat.office.GetWorkMomentByIDResp
	(*GetUserSendWorkMomentsReq)(nil),     // 38: OpenIMChat.office.GetUserSendWorkMomentsReq
	(*GetUserSendWorkMomentsResp)(nil),    // 39: OpenIMChat.office.GetUserSendWorkMomentsResp
	(*GetUserRecvWorkMomentsReq)(nil),     // 40: OpenIMChat.office.GetUserRecvWorkMomentsReq
	(*GetUserRecvWorkMomentsResp)(nil),    // 41: OpenIMChat.office.GetUserRecvWorkMomentsResp
	(*FindRelevantWorkMomentsReq)(nil),    // 42: OpenIMChat.office.FindRelevantWorkMomentsReq
	(*WorkMomentLog)(nil),                 // 43: OpenIMChat.office.WorkMomentLog
	(*FindRelevantWorkMomentsResp)(nil),   // 44: OpenIMChat.office.FindRelevantWorkMomentsResp
	(*GetUnreadWorkMomentsCountReq)(nil),  // 45: OpenIMChat.office.GetUnreadWorkMomentsCountReq
	(*GetUnreadWorkMomentsCountResp)(nil), // 46: OpenIMChat.office.GetUnreadWorkMomentsCountResp
	(*ReadWorkMomentsReq)(nil),            // 47: OpenIMChat.office.ReadWorkMomentsReq
	(*ReadWorkMomentsResp)(nil),           // 48: OpenIMChat.office.ReadWorkMomentsResp
	(*WorkMomentNotificationMsg)(nil),     // 49: OpenIMChat.office.WorkMomentNotificationMsg
	(*common.UserPublicInfo)(nil),         // 50: OpenIMChat.common.UserPublicInfo
	(*sdkws.RequestPagination)(nil),       // 51: OpenIMServer.sdkws.RequestPagination
}
var file_office_office_proto_depIdxs = []int32{
	50, // 0: OpenIMChat.office.Tag.users:type_name -> OpenIMChat.common.UserPublicInfo
	1,  // 1: OpenIMChat.office.GetUserTagsResp.tags:type_name -> OpenIMChat.office.Tag
	50, // 2: OpenIMChat.office.SendMsg2TagResp.sendUser:type_name -> OpenIMChat.common.UserPublicInfo
	51, // 3: OpenIMChat.office.GetTagSendLogsReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	1,  // 4: OpenIMChat.office.TagSendLog.tags:type_name -> OpenIMChat.office.Tag
	50, // 5: OpenIMChat.office.TagSendLog.users:type_name -> OpenIMChat.common.UserPublicInfo
	13, // 6: OpenIMChat.office.GetTagSendLogsResp.tagSendLogs:type_name -> OpenIMChat.office.TagSendLog
	1,  // 7: OpenIMChat.office.GetUserTagByIDResp.tag:type_name -> OpenIMChat.office.Tag
	22, // 8: OpenIMChat.office.WorkMomentContent.metas:type_name -> OpenIMChat.office.Meta
	23, // 9: OpenIMChat.office.WorkMoment.content:type_name -> OpenIMChat.office.WorkMomentContent
	24, // 10: OpenIMChat.office.WorkMoment.likeUsers:type_name -> OpenIMChat.office.LikeUserInfo
	19, // 11: OpenIMChat.office.WorkMoment.comments:type_name -> OpenIMChat.office.Comment
	50, // 12: OpenIMChat.office.WorkMoment.permissionUsers:type_name -> OpenIMChat.common.UserPublicInfo
	50, // 13: OpenIMChat.office.WorkMoment.atUsers:type_name -> OpenIMChat.common.UserPublicInfo
	23, // 14: OpenIMChat.office.CreateOneWorkMomentReq.content:type_name -> OpenIMChat.office.WorkMomentContent
	19, // 15: OpenIMChat.office.CreateOneWorkMomentReq.comments:type_name -> OpenIMChat.office.Comment
	25, // 16: OpenIMChat.office.CreateOneWorkMomentResp.workMoment:type_name -> OpenIMChat.office.WorkMoment
	25, // 17: OpenIMChat.office.LikeOneWorkMomentResp.workMoment:type_name -> OpenIMChat.office.WorkMoment
	25, // 18: OpenIMChat.office.CommentOneWorkMomentResp.workMoment:type_name -> OpenIMChat.office.WorkMoment
	25, // 19: OpenIMChat.office.DeleteCommentResp.workMoment:type_name -> OpenIMChat.office.WorkMoment
	25, // 20: OpenIMChat.office.GetWorkMomentByIDResp.workMoment:type_name -> OpenIMChat.office.WorkMoment
	51, // 21: OpenIMChat.office.GetUserSendWorkMomentsReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	25, // 22: OpenIMChat.office.GetUserSendWorkMomentsResp.workMoments:type_name -> OpenIMChat.office.WorkMoment
	51, // 23: OpenIMChat.office.GetUserRecvWorkMomentsReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	25, // 24: OpenIMChat.office.GetUserRecvWorkMomentsResp.workMoments:type_name -> OpenIMChat.office.WorkMoment
	51, // 25: OpenIMChat.office.FindRelevantWorkMomentsReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	23, // 26: OpenIMChat.office.WorkMomentLog.content:type_name -> OpenIMChat.office.WorkMomentContent
	24, // 27: OpenIMChat.office.WorkMomentLog.likeUsers:type_name -> OpenIMChat.office.LikeUserInfo
	19, // 28: OpenIMChat.office.WorkMomentLog.comments:type_name -> OpenIMChat.office.Comment
	50, // 29: OpenIMChat.office.WorkMomentLog.permissionUsers:type_name -> OpenIMChat.common.UserPublicInfo
	50, // 30: OpenIMChat.office.WorkMomentLog.atUsers:type_name -> OpenIMChat.common.UserPublicInfo
	43, // 31: OpenIMChat.office.FindRelevantWorkMomentsResp.workMoments:type_name -> OpenIMChat.office.WorkMomentLog
	23, // 32: OpenIMChat.office.WorkMomentNotificationMsg.content:type_name -> OpenIMChat.office.WorkMomentContent
	2,  // 33: OpenIMChat.office.Office.GetUserTags:input_type -> OpenIMChat.office.GetUserTagsReq
	4,  // 34: OpenIMChat.office.Office.CreateTag:input_type -> OpenIMChat.office.CreateTagReq
	6,  // 35: OpenIMChat.office.Office.DeleteTag:input_type -> OpenIMChat.office.DeleteTagReq
	8,  // 36: OpenIMChat.office.Office.SetTag:input_type -> OpenIMChat.office.SetTagReq
	10, // 37: OpenIMChat.office.Office.SendMsg2Tag:input_type -> OpenIMChat.office.SendMsg2TagReq
	12, // 38: OpenIMChat.office.Office.GetTagSendLogs:input_type -> OpenIMChat.office.GetTagSendLogsReq
	15, // 39: OpenIMChat.office.Office.DelTagSendLog:input_type -> OpenIMChat.office.DelTagSendLogReq
	17, // 40: OpenIMChat.office.Office.GetUserTagByID:input_type -> OpenIMChat.office.GetUserTagByIDReq
	26, // 41: OpenIMChat.office.Office.CreateOneWorkMoment:input_type -> OpenIMChat.office.CreateOneWorkMomentReq
	28, // 42: OpenIMChat.office.Office.DeleteOneWorkMoment:input_type -> OpenIMChat.office.DeleteOneWorkMomentReq
	30, // 43: OpenIMChat.office.Office.LikeOneWorkMoment:input_type -> OpenIMChat.office.LikeOneWorkMomentReq
	32, // 44: OpenIMChat.office.Office.CommentOneWorkMoment:input_type -> OpenIMChat.office.CommentOneWorkMomentReq
	34, // 45: OpenIMChat.office.Office.DeleteComment:input_type -> OpenIMChat.office.DeleteCommentReq
	36, // 46: OpenIMChat.office.Office.GetWorkMomentByID:input_type -> OpenIMChat.office.GetWorkMomentByIDReq
	38, // 47: OpenIMChat.office.Office.GetUserSendWorkMoments:input_type -> OpenIMChat.office.GetUserSendWorkMomentsReq
	40, // 48: OpenIMChat.office.Office.GetUserRecvWorkMoments:input_type -> OpenIMChat.office.GetUserRecvWorkMomentsReq
	42, // 49: OpenIMChat.office.Office.FindRelevantWorkMoments:input_type -> OpenIMChat.office.FindRelevantWorkMomentsReq
	45, // 50: OpenIMChat.office.Office.GetUnreadWorkMomentsCount:input_type -> OpenIMChat.office.GetUnreadWorkMomentsCountReq
	47, // 51: OpenIMChat.office.Office.ReadWorkMoments:input_type -> OpenIMChat.office.ReadWorkMomentsReq
	3,  // 52: OpenIMChat.office.Office.GetUserTags:output_type -> OpenIMChat.office.GetUserTagsResp
	5,  // 53: OpenIMChat.office.Office.CreateTag:output_type -> OpenIMChat.office.CreateTagResp
	7,  // 54: OpenIMChat.office.Office.DeleteTag:output_type -> OpenIMChat.office.DeleteTagResp
	9,  // 55: OpenIMChat.office.Office.SetTag:output_type -> OpenIMChat.office.SetTagResp
	11, // 56: OpenIMChat.office.Office.SendMsg2Tag:output_type -> OpenIMChat.office.SendMsg2TagResp
	14, // 57: OpenIMChat.office.Office.GetTagSendLogs:output_type -> OpenIMChat.office.GetTagSendLogsResp
	16, // 58: OpenIMChat.office.Office.DelTagSendLog:output_type -> OpenIMChat.office.DelTagSendLogResp
	18, // 59: OpenIMChat.office.Office.GetUserTagByID:output_type -> OpenIMChat.office.GetUserTagByIDResp
	27, // 60: OpenIMChat.office.Office.CreateOneWorkMoment:output_type -> OpenIMChat.office.CreateOneWorkMomentResp
	29, // 61: OpenIMChat.office.Office.DeleteOneWorkMoment:output_type -> OpenIMChat.office.DeleteOneWorkMomentResp
	31, // 62: OpenIMChat.office.Office.LikeOneWorkMoment:output_type -> OpenIMChat.office.LikeOneWorkMomentResp
	33, // 63: OpenIMChat.office.Office.CommentOneWorkMoment:output_type -> OpenIMChat.office.CommentOneWorkMomentResp
	35, // 64: OpenIMChat.office.Office.DeleteComment:output_type -> OpenIMChat.office.DeleteCommentResp
	37, // 65: OpenIMChat.office.Office.GetWorkMomentByID:output_type -> OpenIMChat.office.GetWorkMomentByIDResp
	39, // 66: OpenIMChat.office.Office.GetUserSendWorkMoments:output_type -> OpenIMChat.office.GetUserSendWorkMomentsResp
	41, // 67: OpenIMChat.office.Office.GetUserRecvWorkMoments:output_type -> OpenIMChat.office.GetUserRecvWorkMomentsResp
	44, // 68: OpenIMChat.office.Office.FindRelevantWorkMoments:output_type -> OpenIMChat.office.FindRelevantWorkMomentsResp
	46, // 69: OpenIMChat.office.Office.GetUnreadWorkMomentsCount:output_type -> OpenIMChat.office.GetUnreadWorkMomentsCountResp
	48, // 70: OpenIMChat.office.Office.ReadWorkMoments:output_type -> OpenIMChat.office.ReadWorkMomentsResp
	52, // [52:71] is the sub-list for method output_type
	33, // [33:52] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_office_office_proto_init() }
func file_office_office_proto_init() {
	if File_office_office_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_office_office_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTagsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTagsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsg2TagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsg2TagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagSendLogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSendLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagSendLogsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTagSendLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTagSendLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTagByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTagByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMomentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMomentContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneWorkMomentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneWorkMomentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneWorkMomentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneWorkMomentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeOneWorkMomentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeOneWorkMomentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentOneWorkMomentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentOneWorkMomentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkMomentByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkMomentByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSendWorkMomentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSendWorkMomentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRecvWorkMomentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRecvWorkMomentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRelevantWorkMomentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMomentLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRelevantWorkMomentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnreadWorkMomentsCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnreadWorkMomentsCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWorkMomentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWorkMomentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office_office_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMomentNotificationMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_office_office_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_office_office_proto_goTypes,
		DependencyIndexes: file_office_office_proto_depIdxs,
		MessageInfos:      file_office_office_proto_msgTypes,
	}.Build()
	File_office_office_proto = out.File
	file_office_office_proto_rawDesc = nil
	file_office_office_proto_goTypes = nil
	file_office_office_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OfficeClient is the client API for Office service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OfficeClient interface {
	GetUserTags(ctx context.Context, in *GetUserTagsReq, opts ...grpc.CallOption) (*GetUserTagsResp, error)
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error)
	SetTag(ctx context.Context, in *SetTagReq, opts ...grpc.CallOption) (*SetTagResp, error)
	SendMsg2Tag(ctx context.Context, in *SendMsg2TagReq, opts ...grpc.CallOption) (*SendMsg2TagResp, error)
	GetTagSendLogs(ctx context.Context, in *GetTagSendLogsReq, opts ...grpc.CallOption) (*GetTagSendLogsResp, error)
	DelTagSendLog(ctx context.Context, in *DelTagSendLogReq, opts ...grpc.CallOption) (*DelTagSendLogResp, error)
	GetUserTagByID(ctx context.Context, in *GetUserTagByIDReq, opts ...grpc.CallOption) (*GetUserTagByIDResp, error)
	CreateOneWorkMoment(ctx context.Context, in *CreateOneWorkMomentReq, opts ...grpc.CallOption) (*CreateOneWorkMomentResp, error)
	DeleteOneWorkMoment(ctx context.Context, in *DeleteOneWorkMomentReq, opts ...grpc.CallOption) (*DeleteOneWorkMomentResp, error)
	LikeOneWorkMoment(ctx context.Context, in *LikeOneWorkMomentReq, opts ...grpc.CallOption) (*LikeOneWorkMomentResp, error)
	CommentOneWorkMoment(ctx context.Context, in *CommentOneWorkMomentReq, opts ...grpc.CallOption) (*CommentOneWorkMomentResp, error)
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
	GetWorkMomentByID(ctx context.Context, in *GetWorkMomentByIDReq, opts ...grpc.CallOption) (*GetWorkMomentByIDResp, error)
	GetUserSendWorkMoments(ctx context.Context, in *GetUserSendWorkMomentsReq, opts ...grpc.CallOption) (*GetUserSendWorkMomentsResp, error)
	GetUserRecvWorkMoments(ctx context.Context, in *GetUserRecvWorkMomentsReq, opts ...grpc.CallOption) (*GetUserRecvWorkMomentsResp, error)
	FindRelevantWorkMoments(ctx context.Context, in *FindRelevantWorkMomentsReq, opts ...grpc.CallOption) (*FindRelevantWorkMomentsResp, error)
	GetUnreadWorkMomentsCount(ctx context.Context, in *GetUnreadWorkMomentsCountReq, opts ...grpc.CallOption) (*GetUnreadWorkMomentsCountResp, error)
	ReadWorkMoments(ctx context.Context, in *ReadWorkMomentsReq, opts ...grpc.CallOption) (*ReadWorkMomentsResp, error)
}

type officeClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeClient(cc grpc.ClientConnInterface) OfficeClient {
	return &officeClient{cc}
}

func (c *officeClient) GetUserTags(ctx context.Context, in *GetUserTagsReq, opts ...grpc.CallOption) (*GetUserTagsResp, error) {
	out := new(GetUserTagsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetUserTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error) {
	out := new(DeleteTagResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) SetTag(ctx context.Context, in *SetTagReq, opts ...grpc.CallOption) (*SetTagResp, error) {
	out := new(SetTagResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/SetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) SendMsg2Tag(ctx context.Context, in *SendMsg2TagReq, opts ...grpc.CallOption) (*SendMsg2TagResp, error) {
	out := new(SendMsg2TagResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/SendMsg2Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetTagSendLogs(ctx context.Context, in *GetTagSendLogsReq, opts ...grpc.CallOption) (*GetTagSendLogsResp, error) {
	out := new(GetTagSendLogsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetTagSendLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) DelTagSendLog(ctx context.Context, in *DelTagSendLogReq, opts ...grpc.CallOption) (*DelTagSendLogResp, error) {
	out := new(DelTagSendLogResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/DelTagSendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetUserTagByID(ctx context.Context, in *GetUserTagByIDReq, opts ...grpc.CallOption) (*GetUserTagByIDResp, error) {
	out := new(GetUserTagByIDResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetUserTagByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) CreateOneWorkMoment(ctx context.Context, in *CreateOneWorkMomentReq, opts ...grpc.CallOption) (*CreateOneWorkMomentResp, error) {
	out := new(CreateOneWorkMomentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/CreateOneWorkMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) DeleteOneWorkMoment(ctx context.Context, in *DeleteOneWorkMomentReq, opts ...grpc.CallOption) (*DeleteOneWorkMomentResp, error) {
	out := new(DeleteOneWorkMomentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/DeleteOneWorkMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) LikeOneWorkMoment(ctx context.Context, in *LikeOneWorkMomentReq, opts ...grpc.CallOption) (*LikeOneWorkMomentResp, error) {
	out := new(LikeOneWorkMomentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/LikeOneWorkMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) CommentOneWorkMoment(ctx context.Context, in *CommentOneWorkMomentReq, opts ...grpc.CallOption) (*CommentOneWorkMomentResp, error) {
	out := new(CommentOneWorkMomentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/CommentOneWorkMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	out := new(DeleteCommentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetWorkMomentByID(ctx context.Context, in *GetWorkMomentByIDReq, opts ...grpc.CallOption) (*GetWorkMomentByIDResp, error) {
	out := new(GetWorkMomentByIDResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetWorkMomentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetUserSendWorkMoments(ctx context.Context, in *GetUserSendWorkMomentsReq, opts ...grpc.CallOption) (*GetUserSendWorkMomentsResp, error) {
	out := new(GetUserSendWorkMomentsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetUserSendWorkMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetUserRecvWorkMoments(ctx context.Context, in *GetUserRecvWorkMomentsReq, opts ...grpc.CallOption) (*GetUserRecvWorkMomentsResp, error) {
	out := new(GetUserRecvWorkMomentsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetUserRecvWorkMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) FindRelevantWorkMoments(ctx context.Context, in *FindRelevantWorkMomentsReq, opts ...grpc.CallOption) (*FindRelevantWorkMomentsResp, error) {
	out := new(FindRelevantWorkMomentsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/FindRelevantWorkMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) GetUnreadWorkMomentsCount(ctx context.Context, in *GetUnreadWorkMomentsCountReq, opts ...grpc.CallOption) (*GetUnreadWorkMomentsCountResp, error) {
	out := new(GetUnreadWorkMomentsCountResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/GetUnreadWorkMomentsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) ReadWorkMoments(ctx context.Context, in *ReadWorkMomentsReq, opts ...grpc.CallOption) (*ReadWorkMomentsResp, error) {
	out := new(ReadWorkMomentsResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.office.Office/ReadWorkMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeServer is the server API for Office service.
type OfficeServer interface {
	GetUserTags(context.Context, *GetUserTagsReq) (*GetUserTagsResp, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error)
	SetTag(context.Context, *SetTagReq) (*SetTagResp, error)
	SendMsg2Tag(context.Context, *SendMsg2TagReq) (*SendMsg2TagResp, error)
	GetTagSendLogs(context.Context, *GetTagSendLogsReq) (*GetTagSendLogsResp, error)
	DelTagSendLog(context.Context, *DelTagSendLogReq) (*DelTagSendLogResp, error)
	GetUserTagByID(context.Context, *GetUserTagByIDReq) (*GetUserTagByIDResp, error)
	CreateOneWorkMoment(context.Context, *CreateOneWorkMomentReq) (*CreateOneWorkMomentResp, error)
	DeleteOneWorkMoment(context.Context, *DeleteOneWorkMomentReq) (*DeleteOneWorkMomentResp, error)
	LikeOneWorkMoment(context.Context, *LikeOneWorkMomentReq) (*LikeOneWorkMomentResp, error)
	CommentOneWorkMoment(context.Context, *CommentOneWorkMomentReq) (*CommentOneWorkMomentResp, error)
	DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error)
	GetWorkMomentByID(context.Context, *GetWorkMomentByIDReq) (*GetWorkMomentByIDResp, error)
	GetUserSendWorkMoments(context.Context, *GetUserSendWorkMomentsReq) (*GetUserSendWorkMomentsResp, error)
	GetUserRecvWorkMoments(context.Context, *GetUserRecvWorkMomentsReq) (*GetUserRecvWorkMomentsResp, error)
	FindRelevantWorkMoments(context.Context, *FindRelevantWorkMomentsReq) (*FindRelevantWorkMomentsResp, error)
	GetUnreadWorkMomentsCount(context.Context, *GetUnreadWorkMomentsCountReq) (*GetUnreadWorkMomentsCountResp, error)
	ReadWorkMoments(context.Context, *ReadWorkMomentsReq) (*ReadWorkMomentsResp, error)
}

// UnimplementedOfficeServer can be embedded to have forward compatible implementations.
type UnimplementedOfficeServer struct {
}

func (*UnimplementedOfficeServer) GetUserTags(context.Context, *GetUserTagsReq) (*GetUserTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTags not implemented")
}
func (*UnimplementedOfficeServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedOfficeServer) DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedOfficeServer) SetTag(context.Context, *SetTagReq) (*SetTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTag not implemented")
}
func (*UnimplementedOfficeServer) SendMsg2Tag(context.Context, *SendMsg2TagReq) (*SendMsg2TagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg2Tag not implemented")
}
func (*UnimplementedOfficeServer) GetTagSendLogs(context.Context, *GetTagSendLogsReq) (*GetTagSendLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagSendLogs not implemented")
}
func (*UnimplementedOfficeServer) DelTagSendLog(context.Context, *DelTagSendLogReq) (*DelTagSendLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTagSendLog not implemented")
}
func (*UnimplementedOfficeServer) GetUserTagByID(context.Context, *GetUserTagByIDReq) (*GetUserTagByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTagByID not implemented")
}
func (*UnimplementedOfficeServer) CreateOneWorkMoment(context.Context, *CreateOneWorkMomentReq) (*CreateOneWorkMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneWorkMoment not implemented")
}
func (*UnimplementedOfficeServer) DeleteOneWorkMoment(context.Context, *DeleteOneWorkMomentReq) (*DeleteOneWorkMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneWorkMoment not implemented")
}
func (*UnimplementedOfficeServer) LikeOneWorkMoment(context.Context, *LikeOneWorkMomentReq) (*LikeOneWorkMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeOneWorkMoment not implemented")
}
func (*UnimplementedOfficeServer) CommentOneWorkMoment(context.Context, *CommentOneWorkMomentReq) (*CommentOneWorkMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentOneWorkMoment not implemented")
}
func (*UnimplementedOfficeServer) DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedOfficeServer) GetWorkMomentByID(context.Context, *GetWorkMomentByIDReq) (*GetWorkMomentByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkMomentByID not implemented")
}
func (*UnimplementedOfficeServer) GetUserSendWorkMoments(context.Context, *GetUserSendWorkMomentsReq) (*GetUserSendWorkMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSendWorkMoments not implemented")
}
func (*UnimplementedOfficeServer) GetUserRecvWorkMoments(context.Context, *GetUserRecvWorkMomentsReq) (*GetUserRecvWorkMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecvWorkMoments not implemented")
}
func (*UnimplementedOfficeServer) FindRelevantWorkMoments(context.Context, *FindRelevantWorkMomentsReq) (*FindRelevantWorkMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRelevantWorkMoments not implemented")
}
func (*UnimplementedOfficeServer) GetUnreadWorkMomentsCount(context.Context, *GetUnreadWorkMomentsCountReq) (*GetUnreadWorkMomentsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadWorkMomentsCount not implemented")
}
func (*UnimplementedOfficeServer) ReadWorkMoments(context.Context, *ReadWorkMomentsReq) (*ReadWorkMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWorkMoments not implemented")
}

func RegisterOfficeServer(s *grpc.Server, srv OfficeServer) {
	s.RegisterService(&_Office_serviceDesc, srv)
}

func _Office_GetUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetUserTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetUserTags(ctx, req.(*GetUserTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).DeleteTag(ctx, req.(*DeleteTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/SetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).SetTag(ctx, req.(*SetTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_SendMsg2Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsg2TagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).SendMsg2Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/SendMsg2Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).SendMsg2Tag(ctx, req.(*SendMsg2TagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetTagSendLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagSendLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetTagSendLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetTagSendLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetTagSendLogs(ctx, req.(*GetTagSendLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_DelTagSendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTagSendLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).DelTagSendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/DelTagSendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).DelTagSendLog(ctx, req.(*DelTagSendLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetUserTagByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTagByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetUserTagByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetUserTagByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetUserTagByID(ctx, req.(*GetUserTagByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_CreateOneWorkMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneWorkMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).CreateOneWorkMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/CreateOneWorkMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).CreateOneWorkMoment(ctx, req.(*CreateOneWorkMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_DeleteOneWorkMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneWorkMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).DeleteOneWorkMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/DeleteOneWorkMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).DeleteOneWorkMoment(ctx, req.(*DeleteOneWorkMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_LikeOneWorkMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeOneWorkMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).LikeOneWorkMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/LikeOneWorkMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).LikeOneWorkMoment(ctx, req.(*LikeOneWorkMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_CommentOneWorkMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentOneWorkMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).CommentOneWorkMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/CommentOneWorkMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).CommentOneWorkMoment(ctx, req.(*CommentOneWorkMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetWorkMomentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkMomentByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetWorkMomentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetWorkMomentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetWorkMomentByID(ctx, req.(*GetWorkMomentByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetUserSendWorkMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSendWorkMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetUserSendWorkMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetUserSendWorkMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetUserSendWorkMoments(ctx, req.(*GetUserSendWorkMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetUserRecvWorkMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRecvWorkMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetUserRecvWorkMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetUserRecvWorkMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetUserRecvWorkMoments(ctx, req.(*GetUserRecvWorkMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_FindRelevantWorkMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRelevantWorkMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).FindRelevantWorkMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/FindRelevantWorkMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).FindRelevantWorkMoments(ctx, req.(*FindRelevantWorkMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_GetUnreadWorkMomentsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadWorkMomentsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetUnreadWorkMomentsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/GetUnreadWorkMomentsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetUnreadWorkMomentsCount(ctx, req.(*GetUnreadWorkMomentsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_ReadWorkMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWorkMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).ReadWorkMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.office.Office/ReadWorkMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).ReadWorkMoments(ctx, req.(*ReadWorkMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Office_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMChat.office.Office",
	HandlerType: (*OfficeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserTags",
			Handler:    _Office_GetUserTags_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Office_CreateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Office_DeleteTag_Handler,
		},
		{
			MethodName: "SetTag",
			Handler:    _Office_SetTag_Handler,
		},
		{
			MethodName: "SendMsg2Tag",
			Handler:    _Office_SendMsg2Tag_Handler,
		},
		{
			MethodName: "GetTagSendLogs",
			Handler:    _Office_GetTagSendLogs_Handler,
		},
		{
			MethodName: "DelTagSendLog",
			Handler:    _Office_DelTagSendLog_Handler,
		},
		{
			MethodName: "GetUserTagByID",
			Handler:    _Office_GetUserTagByID_Handler,
		},
		{
			MethodName: "CreateOneWorkMoment",
			Handler:    _Office_CreateOneWorkMoment_Handler,
		},
		{
			MethodName: "DeleteOneWorkMoment",
			Handler:    _Office_DeleteOneWorkMoment_Handler,
		},
		{
			MethodName: "LikeOneWorkMoment",
			Handler:    _Office_LikeOneWorkMoment_Handler,
		},
		{
			MethodName: "CommentOneWorkMoment",
			Handler:    _Office_CommentOneWorkMoment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Office_DeleteComment_Handler,
		},
		{
			MethodName: "GetWorkMomentByID",
			Handler:    _Office_GetWorkMomentByID_Handler,
		},
		{
			MethodName: "GetUserSendWorkMoments",
			Handler:    _Office_GetUserSendWorkMoments_Handler,
		},
		{
			MethodName: "GetUserRecvWorkMoments",
			Handler:    _Office_GetUserRecvWorkMoments_Handler,
		},
		{
			MethodName: "FindRelevantWorkMoments",
			Handler:    _Office_FindRelevantWorkMoments_Handler,
		},
		{
			MethodName: "GetUnreadWorkMomentsCount",
			Handler:    _Office_GetUnreadWorkMomentsCount_Handler,
		},
		{
			MethodName: "ReadWorkMoments",
			Handler:    _Office_ReadWorkMoments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "office/office.proto",
}
